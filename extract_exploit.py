import json
import os

def fix_json_syntax(content):
    """
    Attempt to fix common JSON syntax issues.
    """
    # Count braces to see if we need to close any
    open_braces = content.count('{')
    close_braces = content.count('}')
    
    if open_braces > close_braces:
        # Add missing closing braces
        content += '}' * (open_braces - close_braces)
    
    return content

def extract_mean_exploitability(file_path, output_file=None, fix_syntax=True):
    """
    Extract mean exploitability for each epoch from a JSON file.
    
    Args:
        file_path (str): Path to the input JSON file
        output_file (str, optional): Path to save the output JSON file
        fix_syntax (bool): Whether to attempt fixing JSON syntax errors
        
    Returns:
        dict: Dictionary with epoch as key and mean exploitability as value
    """
    
    try:
        # Read the JSON file
        with open(file_path, 'r') as f:
            content = f.read()
        
        # Try to parse JSON, attempt to fix if it fails
        try:
            data = json.loads(content)
        except json.JSONDecodeError as e:
            if fix_syntax:
                print(f"JSON syntax error detected: {e}")
                print("Attempting to fix JSON syntax...")
                
                # Try to fix common issues
                fixed_content = fix_json_syntax(content)
                
                try:
                    data = json.loads(fixed_content)
                    print("JSON syntax fixed successfully!")
                except json.JSONDecodeError as e2:
                    print(f"Could not fix JSON syntax: {e2}")
                    return {}
            else:
                raise e
        
        # Dictionary to store results
        epoch_exploitability = {}
        
        # Process each epoch
        for epoch_key, epoch_data in data.items():
            if epoch_key.startswith('epoch_'):
                # Check if summary exists in the epoch data
                if 'summary' in epoch_data:
                    mean_exploitability = epoch_data['summary'].get('mean_exploitability', None)
                    
                    if mean_exploitability is not None:
                        epoch_exploitability[epoch_key] = mean_exploitability
                    else:
                        print(f"Warning: No mean_exploitability found in summary for {epoch_key}")
                else:
                    print(f"Warning: No summary section found for {epoch_key}")
        
        # Sort epochs by their number for better readability
        sorted_epochs = dict(sorted(epoch_exploitability.items(), 
                                  key=lambda x: int(x[0].split('_')[1])))
        
        # Save to output file if specified
        if output_file:
            with open(output_file, 'w') as f:
                json.dump(sorted_epochs, f, indent=2)
            print(f"Results saved to {output_file}")
        
        # Print results
        print("Mean Exploitability by Epoch:")
        print("=" * 40)
        for epoch, exploitability in sorted_epochs.items():
            print(f"{epoch}: {exploitability}")
        
        return sorted_epochs
        
    except FileNotFoundError:
        print(f"Error: File {file_path} not found.")
        return {}
    except json.JSONDecodeError as e:
        print(f"Error: Invalid JSON format in {file_path}")
        print(f"JSON Error: {e}")
        print("\nTips to fix your JSON file:")
        print("1. Make sure all opening braces '{' have matching closing braces '}'")
        print("2. Check for missing commas between objects")
        print("3. Ensure all strings are properly quoted")
        return {}
    except Exception as e:
        print(f"Error: {str(e)}")
        return {}

def main():
    # Example usage
    input_file = "epoch_stats_maxmin.json"  # Replace with your actual file path
    output_file = "mean_exploitability_by_epoch_maxmin.json"  # Optional: output file
    
    # Check if input file exists
    if not os.path.exists(input_file):
        print(f"Please update the 'input_file' variable with the correct path to your JSON file.")
        print(f"Currently looking for: {input_file}")
        return
    
    # Extract mean exploitability
    results = extract_mean_exploitability(input_file, output_file)
    
    # Additional statistics
    if results:
        values = list(results.values())
        print(f"\nStatistics:")
        print(f"Total epochs: {len(values)}")
        print(f"Min exploitability: {min(values):.6f}")
        print(f"Max exploitability: {max(values):.6f}")
        print(f"Average exploitability: {sum(values)/len(values):.6f}")

if __name__ == "__main__":
    main()